# -*- coding: utf-8 -*-
"""epoch_extract

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1tAkelMoCO7g_Kglkp4MfxmBjOLU_UDBA
"""

#This is just a simple extractor for epochs

import pyedflib
from keras.utils import to_categorical
from sklearn import preprocessing
from pyedflib import highlevel
import numpy as np

class epoch_extract(): 
  def __init___(self): 
    self.sample_rate=0
    self.final_labels
    self.epoch={} 

  def read(self,datafile): 
    self.signals, self.signal_headers, self.header = highlevel.read_edf(datafile)
    self.sample_rate= self.signal_headers[0]['sample_rate']
    print(f'Data Imported, sample rate: ' , self.sample_rate)
  
  def process(self): 
    events=self.header['annotations'][0:len(self.header['annotations'])]
    events=np.array(events) 
    labels=events[:,2] #gather labels 
    time_stamps=events[:,0] #gather time stamps.
    le = preprocessing.LabelEncoder()
    le.fit(labels)
    classes=le.classes_
    self.final_labels=le.transform(labels) #converts all the classes in to values this will be outputted. 
    print ('extracted labels')
    time_stamps_fl=[]
    for i in range(len(time_stamps)):
      time_stamps_fl.append(float(time_stamps[i]))
    time_stamps_fl=np.array(time_stamps_fl)
    time_stamps_fl=np.round(time_stamps_fl *self.sample_rate)
    
    #slice up epochs 
    start=0 
    self.epoch={} 
    for i in range(len(time_stamps_fl)): 
      end=int(time_stamps_fl[i])
      self.epoch.update( {i:self.signals[0,start:end]})
      start=end
    print('extracted epochs')
    
  def output(self):
    return [self.epoch,self.final_labels]